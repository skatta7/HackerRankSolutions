import scala.collection.immutable

object MainApp  extends App {


println("Hi There=======")

  val relations = Array("1100","1110","0110","0001")
  val relations2 = Array("1100","1100","0010","0001")
  val relations3 = Array("110","110","001")
  val relations4 = Array("10000","01000","00100", "00010", "00001")
  val relations5 = Array("11000","11000","00110", "00111", "00011")
  val relations6 = Array("1000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000",
    "0100000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000",
    "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000100000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000001000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000",
    "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000001000000000001000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000010000000000100000000000000000000000000000000000000000000000000000000100000000000000000",
    "0000000000000001000000000000000000000000000000000000000000000000000000001000000000000000000000000000",
    "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000100000000",
    "0000000000000000001000000000000000000000000010000000000000000000000000000000000000000000000000000000",
    "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000100000000000",
    "0000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000010000000000000000000000000000000100000000000000000000000000000000000000000000",
    "0000000000001000000000001000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000010000000000100000000000000000000000000000000000010000000000000000000000000000000000000",
    "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000100000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000010000000000000000000000100000000000000000000000000000000000000000000000",
    "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000100000000000000000100000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000010001000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000010000010000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000010001000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000",
    "0000000000000000001000000000000000000000000010000000100000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000100000000000000000000000000001000000000000000100000000",
    "0000000000000000000000000000000000000000010000010000010000000000000000000000000000000100000000000000",
    "0100000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000",
    "0000000001000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000001000000000000001000000000000000000000000000000000",
    "0000000000000000000000000000010000000000000010000000100000000000000000000000000000000000000000000010",
    "0000000000000000000000000000000000000000000000010000010000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000",
    "0000000000000000000000010000000000000100000000000000000100000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000001",
    "0000000000000000000000000000000000000000000000000000000000100000000100000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000100000000000100000000000000000000000000",
    "0000000000000000000000000100000000000000000000000000000000000010000000100000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000001000000000000001000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000100000000100000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000010000000100000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000",
    "0000000000000001000000000000000000000000000000000000000000000000000000001000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000100000000000100000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000",
    "0000000000000000000000000000000000000000000000100000000000000000000000000001000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000",
    "0000000000000010000000000000000000000000000000000000000000000000000000000000000000100000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000",
    "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000100000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000",
    "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000100000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000",
    "0000000000000000010000000000000000000000000000100000000000000000000000000000000000000000000100000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100",
    "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000010",
    "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000001")

  println(groupCount(relations6))
  def groupCount(relations:Array[String]) = {
    val relationsMap = relations.zipWithIndex.map[(Int, String)](s => (s._2, s._1)).toMap
    val partitionedGroups = partitionLonelyGroups(relationsMap)
    val x = findGroups(partitionedGroups._2)

    val rrrr = doit(x)
    println(rrrr.size)
    println(partitionedGroups._1.size)
    partitionedGroups._1.size + x.size
  }

  def doit(grps:Map[Int, Map[Int, String]]) = {
    grps.foldLeft[Map[Int, Map[Int, String]]](Map.empty)((newGrps, group) => {
      val rGp = grps.get(group._1) match {
        case Some(_) => grps.filter(d => group._1 == d._1)
        case None =>grps
      }
      rGp ++ newGrps
    }
    )
  }

  def partitionLonelyGroups(relations:immutable.Map[Int, String]) = {
    relations.partition(r => r._2.count(_ == '1') == 1 && r._2.indexOf('1') == r._1 )
  }

  def findGroups(relations:immutable.Map[Int, String]) = {
    def findRelations(relation:String) = {
      relations.filter(r => relation.zipWithIndex.filter(_._1 == '1').map(_._2).contains(r._1))
    }
    relations.foldLeft[Map[Int, Map[Int, String]]](Map.empty)((groups, relation) => {
     val newGroups =  groups.find(_._2.contains(relation._1)) match {
        case Some(value) => value._1 -> (value._2 ++ findRelations(relation._2))
        case None => relation._1 -> findRelations(relation._2)
      }
      groups + newGroups
    })
  }

  val coins = "bab"

  def findShortSubStringSize(coins:String) = {
    val distinctChars = coins.toCharArray.distinct
    val startIndex = 0
    val endIndex = distinctChars.length -1

    @scala.annotation.tailrec
    def findSubString(x:Int, y:Int, nextEndIndex:Int):Int = {
      val subStr =  coins.substring(x, y)
      if(allCharsExists(subStr)) subStr.length else {
        if(y == coins.length) findSubString(startIndex, nextEndIndex+1, nextEndIndex+1) else
        findSubString(x+1, y+1, nextEndIndex)
      }
    }

    def allCharsExists(subStr:String) = {
      distinctChars.forall(subStr.contains(_))
    }
    findSubString(startIndex, endIndex, endIndex)
  }
  println(findShortSubStringSize(coins))



}
